 1 #include <linux/init.h>
 2 #include <linux/kernel.h>
 3 #include <linux/module.h>
 4 #include <linux/sched.h>
 5 #include <linux/mm.h>
 6
 7 static int pid_mem = 1;
 8
 9 static void print_mem(struct task_struct *task)
10 {
11         struct mm_struct *mm;
12         struct vm_area_struct *vma;
13         int count = 0;
14         mm = task->mm;
15         printk("\nThis mm_struct has %d vmas.\n", mm->map_count);
16         for (vma = mm->mmap ; vma ; vma = vma->vm_next) {
17                 printk ("\nVma number %d: \n", ++count);
18                 printk("  Starts at 0x%lx, Ends at 0x%lx\n",
19                           vma->vm_start, vma->vm_end);
20         }
21         printk("\nCode  Segment start = 0x%lx, end = 0x%lx \n"
22                  "Data  Segment start = 0x%lx, end = 0x%lx\n"
23                  "Stack Segment start = 0x%lx\n",
24                  mm->start_code, mm->end_code,
25                  mm->start_data, mm->end_data,
26                  mm->start_stack);
27 }
28
29 static int mm_exp_load(void){
30         struct task_struct *task;
31         printk("\nGot the process id to look up as %d.\n", pid_mem);
32         for_each_process(task) {
33                 if ( task->pid == pid_mem) {
34                         printk("%s[%d]\n", task->comm, task->pid);
35                         print_mem(task);
36                 }
37         }
38         return 0;
39 }
40
41 static void mm_exp_unload(void)
42 {
43         printk("\nPrint segment information module exiting.\n");
44 }
45
46 module_init(mm_exp_load);
47 module_exit(mm_exp_unload);
48 module_param(pid_mem, int, 0);
49
50 MODULE_AUTHOR ("Krishnakumar. R, rkrishnakumar@gmail.com");
51 MODULE_DESCRIPTION ("Print segment information");
52 MODULE_LICENSE("GPL");
